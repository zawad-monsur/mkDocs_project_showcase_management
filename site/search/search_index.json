{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Software Requirements Specification for Project Showcase Management Version 1.0 approved Prepared by Debopom Sutradha(011201046) K.M. Zawad Monsur (011181225) Sultan Mahmud Alif (011191155) Millat Hossain (011191121) Date: 24/09/2022","title":"Index"},{"location":"#software-requirements-specification","text":"for","title":"Software Requirements Specification"},{"location":"#project-showcase-management","text":"","title":"Project Showcase Management"},{"location":"#version-10-approved","text":"","title":"Version 1.0 approved"},{"location":"#prepared-by","text":"Debopom Sutradha(011201046) K.M. Zawad Monsur (011181225) Sultan Mahmud Alif (011191155) Millat Hossain (011191121) Date: 24/09/2022","title":"Prepared by"},{"location":"blackbox_testing/","text":"Black Box Testing Login Page Test from selenium import webdriver from webdriver_manager.chrome import ChromeDriverManager from selenium.webdriver.common.keys import Keys import time driver = webdriver.Chrome(ChromeDriverManager().install()) driver.get(\"http://localhost:84/Project%20Showcase%20Management/\") submit = driver.find_element('xpath','/html/body/section[1]/div/div/div/button') submit.click() time.sleep(3) driver.get(\"http://localhost:84/Project%20Showcase%20Management/login.php\") student = driver.find_element('xpath','/html/body/div/div/div/form[2]/div/button') student.click() time.sleep(3) driver.get(\"http://localhost:84/Project%20Showcase%20Management/login_student.php\") time.sleep(3) id = driver.find_element('xpath','/html/body/div/div/div/div[2]/form/div[2]/input') password = driver.find_element('xpath','/html/body/div/div/div/div[2]/form/div[3]/input') login = driver.find_element('xpath','/html/body/div/div/div/div[3]/button') id.send_keys('011201046') password.send_keys('12345678') login.click() time.sleep(3) print('success ') while True: time.sleep(1) Facult Login Page from selenium import webdriver from webdriver_manager.chrome import ChromeDriverManager from selenium.webdriver.common.keys import Keys import time driver = webdriver.Chrome(ChromeDriverManager().install()) driver.get(\"http://localhost:84/Project%20Showcase%20Management/\") submit = driver.find_element('xpath','/html/body/section[1]/div/div/div/button') submit.click() time.sleep(3) driver.get(\"http://localhost:84/Project%20Showcase%20Management/login.php\") faculty = driver.find_element('xpath','/html/body/div/div/div/form[1]/div/button') faculty.click() time.sleep(3) driver.get(\"http://localhost:84/Project%20Showcase%20Management/login_faculty.php\") time.sleep(3) id = driver.find_element('xpath','/html/body/div/div/div/div[2]/form/div[2]/input') password = driver.find_element('xpath','/html/body/div/div/div/div[2]/form/div[3]/input') login = driver.find_element('xpath','/html/body/div/div/div/div[3]/button') id.send_keys('1') password.send_keys('123456789') login.click() time.sleep(3) print('success ') while True: time.sleep(1)","title":"Black Box Testing"},{"location":"blackbox_testing/#black-box-testing","text":"","title":"Black Box Testing"},{"location":"blackbox_testing/#login-page-test","text":"from selenium import webdriver from webdriver_manager.chrome import ChromeDriverManager from selenium.webdriver.common.keys import Keys import time driver = webdriver.Chrome(ChromeDriverManager().install()) driver.get(\"http://localhost:84/Project%20Showcase%20Management/\") submit = driver.find_element('xpath','/html/body/section[1]/div/div/div/button') submit.click() time.sleep(3) driver.get(\"http://localhost:84/Project%20Showcase%20Management/login.php\") student = driver.find_element('xpath','/html/body/div/div/div/form[2]/div/button') student.click() time.sleep(3) driver.get(\"http://localhost:84/Project%20Showcase%20Management/login_student.php\") time.sleep(3) id = driver.find_element('xpath','/html/body/div/div/div/div[2]/form/div[2]/input') password = driver.find_element('xpath','/html/body/div/div/div/div[2]/form/div[3]/input') login = driver.find_element('xpath','/html/body/div/div/div/div[3]/button') id.send_keys('011201046') password.send_keys('12345678') login.click() time.sleep(3) print('success ') while True: time.sleep(1)","title":"Login Page Test"},{"location":"blackbox_testing/#facult-login-page","text":"from selenium import webdriver from webdriver_manager.chrome import ChromeDriverManager from selenium.webdriver.common.keys import Keys import time driver = webdriver.Chrome(ChromeDriverManager().install()) driver.get(\"http://localhost:84/Project%20Showcase%20Management/\") submit = driver.find_element('xpath','/html/body/section[1]/div/div/div/button') submit.click() time.sleep(3) driver.get(\"http://localhost:84/Project%20Showcase%20Management/login.php\") faculty = driver.find_element('xpath','/html/body/div/div/div/form[1]/div/button') faculty.click() time.sleep(3) driver.get(\"http://localhost:84/Project%20Showcase%20Management/login_faculty.php\") time.sleep(3) id = driver.find_element('xpath','/html/body/div/div/div/div[2]/form/div[2]/input') password = driver.find_element('xpath','/html/body/div/div/div/div[2]/form/div[3]/input') login = driver.find_element('xpath','/html/body/div/div/div/div[3]/button') id.send_keys('1') password.send_keys('123456789') login.click() time.sleep(3) print('success ') while True: time.sleep(1)","title":"Facult Login Page"},{"location":"contents/","text":"Table of contents Table of contents Revision History Introdution Purpose Document Conventions Intended Audience and Reading Suggestions Product Scope References Overall Description Product Prespective User Classes and Characteristics Operating Environment Design and Implementation Constraints User Documentation Assumptions and Dependencies External Interface Requirements User Interfaces Software Interfaces Communications Interfaces System Features System Feature 1 Other Nonfunctional Requirements Performance Requirements Security Requirements Software Quality Attributes Appendix A: Glossary Appendix B: Analysis Models Appendix C: To Be Determined List Revision History Name Date Reason For Changes version Mid- Presentation 19-07-22 creating sign-up and sign-in page for student, teacher and organizers and create project upload page. On organizer side create notice page where student can view notice 0.2 Pre-final 06-09-22 Create a student dashboard, teacher dashboard and judges can upload their marks. 0.1 Final 19-09-22 students can upload project updates; faculty can observe projects and judges give their marks based on every project. Organizers can collect judge\u2019s evaluations marks and select the winner team of every individual course project 1.0","title":"Table of Contents"},{"location":"contents/#table-of-contents","text":"Table of contents Revision History Introdution Purpose Document Conventions Intended Audience and Reading Suggestions Product Scope References Overall Description Product Prespective User Classes and Characteristics Operating Environment Design and Implementation Constraints User Documentation Assumptions and Dependencies External Interface Requirements User Interfaces Software Interfaces Communications Interfaces System Features System Feature 1 Other Nonfunctional Requirements Performance Requirements Security Requirements Software Quality Attributes Appendix A: Glossary Appendix B: Analysis Models Appendix C: To Be Determined List","title":"Table of contents"},{"location":"contents/#revision-history","text":"Name Date Reason For Changes version Mid- Presentation 19-07-22 creating sign-up and sign-in page for student, teacher and organizers and create project upload page. On organizer side create notice page where student can view notice 0.2 Pre-final 06-09-22 Create a student dashboard, teacher dashboard and judges can upload their marks. 0.1 Final 19-09-22 students can upload project updates; faculty can observe projects and judges give their marks based on every project. Organizers can collect judge\u2019s evaluations marks and select the winner team of every individual course project 1.0","title":"Revision History"},{"location":"external_interface_requirements/","text":"External Interface Requirements User Interfaces Front-end software: PHP / ajax / javascript Back-end software: MySQL database Faculty Dashboard Login Error Student Dashboard Search Project Judge Project Search Project Evaluation Marks Software Interfaces Software Used Description Operating System We have chosen the Windows operating system for its best support and user-friendliness. Database To save the project records we have chosen a MySQL database. Front-end html, Bootstrap, javascript Back-end php, javascript, JSON Communication Interfaces This project supports all types of web browsers. We are using simple electronic forms for the Project creation and evaluation, room booking etc.","title":"External Interface Requirements"},{"location":"external_interface_requirements/#external-interface-requirements","text":"","title":"External Interface Requirements"},{"location":"external_interface_requirements/#user-interfaces","text":"Front-end software: PHP / ajax / javascript Back-end software: MySQL database Faculty Dashboard Login Error Student Dashboard Search Project Judge Project Search Project Evaluation Marks","title":"User Interfaces"},{"location":"external_interface_requirements/#software-interfaces","text":"Software Used Description Operating System We have chosen the Windows operating system for its best support and user-friendliness. Database To save the project records we have chosen a MySQL database. Front-end html, Bootstrap, javascript Back-end php, javascript, JSON","title":"Software Interfaces"},{"location":"external_interface_requirements/#communication-interfaces","text":"This project supports all types of web browsers. We are using simple electronic forms for the Project creation and evaluation, room booking etc.","title":"Communication Interfaces"},{"location":"introduction/","text":"Introdution Purpose The purpose of this is to build a project to develop a system that will allow an institution to create an event for a project showcase. Here students can participate and create groups for their corresponding course projects. Students can also see the notice board and submit their project files.Faculty can evaluate easily and organizers can organize the program properly. Document Conventions DB ER Database Entity Relationship Intended Audience and Reading Suggestions This project is a prototype for the project management system and it is restricted within the university premises. This has been implemented under the guidance of a university lecturer. This project is useful for the organizers,judges and as well as for the students. Product Scope This software system will be a project show-case management for the organizers, students and faculty of the university. This system will be designed for students who can make team members and upload project descriptions. Faculty can track the project and can give their opinion for the project. By the organizer work efficiency and judges are easy to process. The system will help judges evaluate every project properly. And also, can track previous projects as done before that help to track the unique one of project history. More specifically, this system is designed to allow an organizer to manage and communicate with students and judges. The system also contains a relational database containing a list of students, judges, faculty and organizers. References IEEE Recommended Practice for Software Requirements Specifications. IEEE Computer Society.Software Engineering Institute (Carnegie Mellon University).","title":"Introduction"},{"location":"introduction/#introdution","text":"","title":"Introdution"},{"location":"introduction/#purpose","text":"The purpose of this is to build a project to develop a system that will allow an institution to create an event for a project showcase. Here students can participate and create groups for their corresponding course projects. Students can also see the notice board and submit their project files.Faculty can evaluate easily and organizers can organize the program properly.","title":"Purpose"},{"location":"introduction/#document-conventions","text":"DB ER Database Entity Relationship","title":"Document Conventions"},{"location":"introduction/#intended-audience-and-reading-suggestions","text":"This project is a prototype for the project management system and it is restricted within the university premises. This has been implemented under the guidance of a university lecturer. This project is useful for the organizers,judges and as well as for the students.","title":"Intended Audience and Reading Suggestions"},{"location":"introduction/#product-scope","text":"This software system will be a project show-case management for the organizers, students and faculty of the university. This system will be designed for students who can make team members and upload project descriptions. Faculty can track the project and can give their opinion for the project. By the organizer work efficiency and judges are easy to process. The system will help judges evaluate every project properly. And also, can track previous projects as done before that help to track the unique one of project history. More specifically, this system is designed to allow an organizer to manage and communicate with students and judges. The system also contains a relational database containing a list of students, judges, faculty and organizers.","title":"Product Scope"},{"location":"introduction/#references","text":"IEEE Recommended Practice for Software Requirements Specifications. IEEE Computer Society.Software Engineering Institute (Carnegie Mellon University).","title":"References"},{"location":"other_nonfunctional_requirements/","text":"Other Nonfunctional Requirements Performance Requirements The steps involved to perform the implementation of the project showcase database are as listed below. ER Diagram The E-R Diagram constitutes a technique for representing the logical structure of a database in a pictorial manner. This analysis is then used to organize data as a relation and finally obtaining a relation database. ENTITIES: Which specify distinct real-world items in an application. PROPERTIES/ATTRIBUTES: Which specify properties of an entity and relationship. RELATIONSHIPS: Which connect entities and represent meaningful dependencies between them. Security Requirements Security systems need database storage just like many other applications. However, the special requirements of the security market mean that vendors must choose their database partner carefully. Software Quality Attributes AVAILABILITY : The students can upload there project document file and faculty can monitor the project. CORRECTNESS : Judges should evaluate every team's project and provide their marks based on every project. MAINTAINABILITY : Organizers should collect the mark from judges and select the winning team based on their marks. USABILITY: The faculty members should monitor the project and give proper guide-lines.","title":"Other Nonfunctional Requirements"},{"location":"other_nonfunctional_requirements/#other-nonfunctional-requirements","text":"","title":"Other Nonfunctional Requirements"},{"location":"other_nonfunctional_requirements/#performance-requirements","text":"The steps involved to perform the implementation of the project showcase database are as listed below.","title":"Performance Requirements"},{"location":"other_nonfunctional_requirements/#er-diagram","text":"The E-R Diagram constitutes a technique for representing the logical structure of a database in a pictorial manner. This analysis is then used to organize data as a relation and finally obtaining a relation database. ENTITIES: Which specify distinct real-world items in an application. PROPERTIES/ATTRIBUTES: Which specify properties of an entity and relationship. RELATIONSHIPS: Which connect entities and represent meaningful dependencies between them.","title":"ER Diagram"},{"location":"other_nonfunctional_requirements/#security-requirements","text":"Security systems need database storage just like many other applications. However, the special requirements of the security market mean that vendors must choose their database partner carefully.","title":"Security Requirements"},{"location":"other_nonfunctional_requirements/#software-quality-attributes","text":"AVAILABILITY : The students can upload there project document file and faculty can monitor the project. CORRECTNESS : Judges should evaluate every team's project and provide their marks based on every project. MAINTAINABILITY : Organizers should collect the mark from judges and select the winning team based on their marks. USABILITY: The faculty members should monitor the project and give proper guide-lines.","title":"Software Quality Attributes"},{"location":"other_requirements/","text":"Other Requirements Students can search the previous trimester project and faculty can also track the previous projects done before. If any student copies a previous semester project then faculty can easily track it.","title":"Other Requirements"},{"location":"other_requirements/#other-requirements","text":"Students can search the previous trimester project and faculty can also track the previous projects done before. If any student copies a previous semester project then faculty can easily track it.","title":"Other Requirements"},{"location":"overall_description/","text":"Overall Description Product Prespective Student Description: It includes student ID, name, email,group ID and phone number. This information may be used for keeping all the records of the student and if there requires any other information for any kind of further need. Organizer Description: It includes organizer details like organizer name, phone number and email. This information would record any all the information about the assigned organizer and it would help to get any information that would requires further need and related information Project Tracking: This section includes project id, Project title, project description, student details, category that records all the information about all submitted project for the showcase that would help organizer and judge to track all the previous project and their details Project Evaluation: This part includes judge,s details and organizer details that helps to generate result of the project showcase with the respected evaluation by the judge and it gets visible at notice panel / progress panel through organizer\u2019s input Product Functions The main functions that includes this project that are authentication as a user and then as a student they need to create project and follow respected steps and process set up by organizers. As a organizer they have update all the notices and assign judge to category. As a judge they are involve in evaluation part and upload there marks and organizer User Classes and Characteristics Users of the system should be able to retrieve project information about project created and previously submitted from the database.When a project idea is given by thye team they have wait for the faculty\u2019s feedback. After accepting the the project idea they would able to submit their first sprint file . If their project idea get rejected then they would be eligible to re-submit their new or improvised project idea. After this process they would be go for sprints and final submission. The Students should be able to do the following functions: Team creation Project creation Submit Project Idea Submit Project description/ Related documents Upload project file View notice The Organizer should be able to do the following functions: Assign judge Assign room Update notice View project details View marks The Judge should be able to do the following functions: View projects evaluate projects Upload marks View Notice ADMINISTRATIVE: Add/ delete organizer Add new season for showcase Update Notice Operating Environment Operating environment for the airline management system is as listed below. Client/server system. Operating system: Windows. Database: sql+ database. Platform: vb.PHP/ajax/javascript. Design and Implementation Constraints SQL commands for above queries/applications How the response for the application will be generated. Assuming these are global queries. Implement the database at least using a centralized database management system. User Documentation Student Sign up/ Login -> Create team -> Add projects -> Upload Projects Organizer Sign Up / Login -> Add judge-> Add Room -> Update Notice Judge Sign Up / Login -> View Projects -> Evaluation Form -> upload Marks Assumptions and Dependencies Let us assume that project showcase show-case management system and it is used in the following application: Students upload their project description on the portal and faculty can view the project description and also give the feedback on what needs to be modified in the project . Students can make group members for their project. Calculation of marks evaluation and calculating appropriate winning team reward use this calculation. Faculty can accept and deny projects. Organizers can add judges and create notice for students. Organizers can assign room numbers for specific course projects and can edit notices or remove judges.","title":"Overall Description"},{"location":"overall_description/#overall-description","text":"","title":"Overall Description"},{"location":"overall_description/#product-prespective","text":"Student Description: It includes student ID, name, email,group ID and phone number. This information may be used for keeping all the records of the student and if there requires any other information for any kind of further need. Organizer Description: It includes organizer details like organizer name, phone number and email. This information would record any all the information about the assigned organizer and it would help to get any information that would requires further need and related information Project Tracking: This section includes project id, Project title, project description, student details, category that records all the information about all submitted project for the showcase that would help organizer and judge to track all the previous project and their details Project Evaluation: This part includes judge,s details and organizer details that helps to generate result of the project showcase with the respected evaluation by the judge and it gets visible at notice panel / progress panel through organizer\u2019s input","title":"Product Prespective"},{"location":"overall_description/#product-functions","text":"The main functions that includes this project that are authentication as a user and then as a student they need to create project and follow respected steps and process set up by organizers. As a organizer they have update all the notices and assign judge to category. As a judge they are involve in evaluation part and upload there marks and organizer","title":"Product Functions"},{"location":"overall_description/#user-classes-and-characteristics","text":"Users of the system should be able to retrieve project information about project created and previously submitted from the database.When a project idea is given by thye team they have wait for the faculty\u2019s feedback. After accepting the the project idea they would able to submit their first sprint file . If their project idea get rejected then they would be eligible to re-submit their new or improvised project idea. After this process they would be go for sprints and final submission. The Students should be able to do the following functions: Team creation Project creation Submit Project Idea Submit Project description/ Related documents Upload project file View notice The Organizer should be able to do the following functions: Assign judge Assign room Update notice View project details View marks The Judge should be able to do the following functions: View projects evaluate projects Upload marks View Notice ADMINISTRATIVE: Add/ delete organizer Add new season for showcase Update Notice","title":"User Classes and Characteristics"},{"location":"overall_description/#operating-environment","text":"Operating environment for the airline management system is as listed below. Client/server system. Operating system: Windows. Database: sql+ database. Platform: vb.PHP/ajax/javascript.","title":"Operating Environment"},{"location":"overall_description/#design-and-implementation-constraints","text":"SQL commands for above queries/applications How the response for the application will be generated. Assuming these are global queries. Implement the database at least using a centralized database management system.","title":"Design and Implementation Constraints"},{"location":"overall_description/#user-documentation","text":"Student Sign up/ Login -> Create team -> Add projects -> Upload Projects Organizer Sign Up / Login -> Add judge-> Add Room -> Update Notice Judge Sign Up / Login -> View Projects -> Evaluation Form -> upload Marks","title":"User Documentation"},{"location":"overall_description/#assumptions-and-dependencies","text":"Let us assume that project showcase show-case management system and it is used in the following application: Students upload their project description on the portal and faculty can view the project description and also give the feedback on what needs to be modified in the project . Students can make group members for their project. Calculation of marks evaluation and calculating appropriate winning team reward use this calculation. Faculty can accept and deny projects. Organizers can add judges and create notice for students. Organizers can assign room numbers for specific course projects and can edit notices or remove judges.","title":"Assumptions and Dependencies"},{"location":"system_features/","text":"System Features Login/Signup and Dashboard Description and Priority: Students,faculty and organizers have different login sections and authentication checks from the database and both have different dashboards. This is the high priority feature of this project. Stimulus/Response Sequences: Student faculty and organizers must login by using there\u2019re id and password. After login every side has a different dashboard and there, they can upload projects, observe projects and organizers add judges and create notices.. Functional Requirements: Students, faculty and organizers have different login requirements like id and password to access this software. If they failed to login then they have to sign up first and get an authentication check from the organization. REQ-1: Students should have to Login REQ-2:Organizers assign the judges REQ-3:Faculty should have unique id and password Create a Project Students have to create their own project after team formation . They have to put their details and Project ideas with a short description. Without creating a project there would be no project record against the team. Stimulus/Response Sequences: Students have to perform an add project and create a project with the form\u2019s requirements. After creating the project they will be able to see the project idea feedback complimented by the course teacher. Functional Requirements: As a user only student can create a project according to course category with information like team members id, project title, project idea,project description and other stuff with specific format that requires to be stored in the database as the format. REQ-1: Students should have to create profile REQ-2:Students have to create team must. REQ-3: Student have to maintain form\u2019s Format Project Evaluation After students submit their project, judges might evaluate every project based on their project performance and judges might give marks to every portion of the project.After evaluate judges upload their marks. Stimulus/Response Sequences: Project evaluation where judges can see all the projects individually and evaluate projects and also assign marks for the project.. Functional Requirements: After students submit their project judges might evaluate every project based on their project performance and judges might give marks to every portion of the project.After evaluate judges upload their marks .If the judges can't properly evaluate update marks then every project marks upload in the marks history database. REQ-1: Views student projects file REQ-2: Access to see every portion of project Notice Board Organizers can upload the notice and students and faculty can view the notice from the notice board. Stimulus/Response Sequences: When organizers upload a notice, students and faculty can view the notice. Functional Requirements: After upload notice from organizers the can edit delete and upload the notice REQ-1: Student view notice REQ-2: Organizers have access to edit delete of notice. Create team & Team Enrollment Students have to create their own project after team formation . They have to put their details and Project ideas with a short description. Without creating a project there would be no project record against the team. Stimulus/Response Sequences: Students have to perform an add project and create a project with the form\u2019s requirements. After creating the project they will be able to see the project idea feedback complimented by the course teacher. Functional Requirements: As a user only student can create a project according to course category with information like team members id, project title, project idea,project description and other stuff with specific format that requires to be stored in the database as the format. REQ-1: Students should have to create profile REQ-2:Students have to create team must. REQ-3: Student have to maintain form\u2019s Format Submit project & Add project updates After creating teams, students submit their projects and faculty will monitor and students can add project updates every sprint. Stimulus/Response Sequences: students upload project and sumit then the can add project updates every time.Feculty have access to see the project update Functional Requirements: After students submit their project, faculty can access the project progress. REQ-1: Views student projects file REQ-2: Access to see every portion of project Project Search Students and faculties can search projects and search result will show the previous projects done before. Stimulus/Response Sequences: Students upload project and sumit then the can add project updates every time.Feculty have access to see the project update Functional Requirements: After student search they will get previous history of project if any project have same name then that will may conflict so we use unique project id of every project REQ-1: search the previous project REQ-2: Access to see history of previous course project","title":"System Features"},{"location":"system_features/#system-features","text":"","title":"System Features"},{"location":"system_features/#loginsignup-and-dashboard","text":"Description and Priority: Students,faculty and organizers have different login sections and authentication checks from the database and both have different dashboards. This is the high priority feature of this project. Stimulus/Response Sequences: Student faculty and organizers must login by using there\u2019re id and password. After login every side has a different dashboard and there, they can upload projects, observe projects and organizers add judges and create notices.. Functional Requirements: Students, faculty and organizers have different login requirements like id and password to access this software. If they failed to login then they have to sign up first and get an authentication check from the organization. REQ-1: Students should have to Login REQ-2:Organizers assign the judges REQ-3:Faculty should have unique id and password","title":"Login/Signup and Dashboard"},{"location":"system_features/#create-a-project","text":"Students have to create their own project after team formation . They have to put their details and Project ideas with a short description. Without creating a project there would be no project record against the team. Stimulus/Response Sequences: Students have to perform an add project and create a project with the form\u2019s requirements. After creating the project they will be able to see the project idea feedback complimented by the course teacher. Functional Requirements: As a user only student can create a project according to course category with information like team members id, project title, project idea,project description and other stuff with specific format that requires to be stored in the database as the format. REQ-1: Students should have to create profile REQ-2:Students have to create team must. REQ-3: Student have to maintain form\u2019s Format","title":"Create a Project"},{"location":"system_features/#project-evaluation","text":"After students submit their project, judges might evaluate every project based on their project performance and judges might give marks to every portion of the project.After evaluate judges upload their marks. Stimulus/Response Sequences: Project evaluation where judges can see all the projects individually and evaluate projects and also assign marks for the project.. Functional Requirements: After students submit their project judges might evaluate every project based on their project performance and judges might give marks to every portion of the project.After evaluate judges upload their marks .If the judges can't properly evaluate update marks then every project marks upload in the marks history database. REQ-1: Views student projects file REQ-2: Access to see every portion of project","title":"Project Evaluation"},{"location":"system_features/#notice-board","text":"Organizers can upload the notice and students and faculty can view the notice from the notice board. Stimulus/Response Sequences: When organizers upload a notice, students and faculty can view the notice. Functional Requirements: After upload notice from organizers the can edit delete and upload the notice REQ-1: Student view notice REQ-2: Organizers have access to edit delete of notice.","title":"Notice Board"},{"location":"system_features/#create-team-team-enrollment","text":"Students have to create their own project after team formation . They have to put their details and Project ideas with a short description. Without creating a project there would be no project record against the team. Stimulus/Response Sequences: Students have to perform an add project and create a project with the form\u2019s requirements. After creating the project they will be able to see the project idea feedback complimented by the course teacher. Functional Requirements: As a user only student can create a project according to course category with information like team members id, project title, project idea,project description and other stuff with specific format that requires to be stored in the database as the format. REQ-1: Students should have to create profile REQ-2:Students have to create team must. REQ-3: Student have to maintain form\u2019s Format","title":"Create team &amp; Team Enrollment"},{"location":"system_features/#submit-project-add-project-updates","text":"After creating teams, students submit their projects and faculty will monitor and students can add project updates every sprint. Stimulus/Response Sequences: students upload project and sumit then the can add project updates every time.Feculty have access to see the project update Functional Requirements: After students submit their project, faculty can access the project progress. REQ-1: Views student projects file REQ-2: Access to see every portion of project","title":"Submit project &amp; Add project updates"},{"location":"system_features/#project-search","text":"Students and faculties can search projects and search result will show the previous projects done before. Stimulus/Response Sequences: Students upload project and sumit then the can add project updates every time.Feculty have access to see the project update Functional Requirements: After student search they will get previous history of project if any project have same name then that will may conflict so we use unique project id of every project REQ-1: search the previous project REQ-2: Access to see history of previous course project","title":"Project Search"}]}